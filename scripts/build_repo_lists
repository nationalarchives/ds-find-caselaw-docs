#!/usr/bin/env python

import re

REPOSITORIES = [
    {
        "id": "ds-find-caselaw-docs",
        "description": "High-level documentation for the service.",
        "hide_releases": True,
    },
    {
        "id": "ds-caselaw-public-ui",
        "description": "Public interface to the service.",
        "renovate_dashboard_issue_id": "819",
    },
    {
        "id": "ds-caselaw-editor-ui",
        "description": "Editor interface to the service.",
        "renovate_dashboard_issue_id": "1051",
    },
    {
        "id": "ds-caselaw-marklogic",
        "description": "MarkLogic database configuration.",
    },
    {
        "id": "ds-caselaw-ingester",
        "description": "Ingests cases from the Transformation Engine into MarkLogic.",
        "renovate_dashboard_issue_id": "82",
    },
    {
        "id": "ds-caselaw-pdf-conversion",
        "description": "Converts a judgement to PDF.",
        "renovate_dashboard_issue_id": "31",
    },
    {
        "id": "ds-caselaw-privileged-api",
        "description": "The API which annotating services talk to.",
        "renovate_dashboard_issue_id": "182",
    },
    {
        "id": "ds-caselaw-custom-api-client",
        "description": "API client to interface with MarkLogic.",
        "pypi": "ds-caselaw-marklogic-api-client",
        "renovate_dashboard_issue_id": "283",
    },
    {
        "id": "ds-caselaw-utils",
        "description": "Common utilities across codebases.",
        "pypi": "ds-caselaw-utils",
        "renovate_dashboard_issue_id": "56",
    },
    {
        "id": "ds-caselaw-frontend",
        "description": "Shared styles used across the Find Caselaw service.",
        "renovate_dashboard_issue_id": "3",
    },
    {
        "id": "ds-caselaw-custom-pdfs",
        "description": "Custom PDFs to overwrite generated ones.",
        "hide_releases": True,
    },
    {
        "id": "ds-caselaw-data-enrichment-service",
        "description": "Detect and tag references to legal documents.",
        "hide_releases": True,
        "renovate_dashboard_issue_id": "235",
    },
]
NA_STRING = "![n/a](https://img.shields.io/badge/-n%2Fa-eee)"

print("Building dashboard...")

with open("repo-dashboard.md", "w") as f:
    f.write("# Repository Dashboard\n")
    f.write("\n")
    f.write(
        "<!-- This file is automatically generated from scripts/build_repo_lists. You shouldn't edit it manually. -->\n"
    )
    f.write("\n")
    f.write(
        "| Repository | Pull requests | Renovate dashboard | Latest commit (`main`) | Latest release (GitHub) | Latest release (PyPi) |\n"
    )
    f.write("| --- | --- | --- | --- | --- | --- |\n")

    for repo in REPOSITORIES:
        repo_name = repo["id"]
        repo_base_url = f"https://github.com/nationalarchives/{repo_name}"
        repo_description = repo["description"] if "description" in repo else "-"

        f.write("| ")
        f.write(f"[{repo_name}]({repo_base_url})")

        f.write(" | ")
        f.write(
            f"[![Pull requests](https://img.shields.io/github/issues-pr/nationalarchives/{repo_name}?label)]({repo_base_url}/pulls)"
        )

        f.write(" | ")
        if "renovate_dashboard_issue_id" in repo:
            f.write(
                f"[![Dashboard](https://img.shields.io/badge/-Dashboard-445)]({repo_base_url}/issues/{repo['renovate_dashboard_issue_id']})"
            )
        else:
            f.write(NA_STRING)

        f.write(" | ")
        f.write(
            f"[![Latest commit to main](https://img.shields.io/github/last-commit/nationalarchives/{repo_name}/main?label)]({repo_base_url}/commits)"
        )

        f.write(" | ")

        if not "hide_releases" in repo or not repo["hide_releases"]:
            f.write(
                f"[![Latest release (GitHub)](https://img.shields.io/github/v/release/nationalarchives/{repo_name}?label&sort=semver)]({repo_base_url}/releases)<br>"
            )
            f.write(
                f"[![GitHub Release Date](https://img.shields.io/github/release-date/nationalarchives/{repo_name}?label&sort=semver)]({repo_base_url}/releases)"
            )
        else:
            f.write(NA_STRING)

        f.write(" | ")
        if "pypi" in repo:
            f.write(
                f"[![Latest release (PyPi)](https://img.shields.io/pypi/v/{repo['pypi']}?label)](https://pypi.org/project/{repo['pypi']}/)"
            )
        else:
            f.write(NA_STRING)

        f.write(" |\n")

print("Populating repository list in readme...")

with open("README.md") as f:
    readme_str = f.read()

pattern = r"""<!-- Begin list of repositories -->.*?<!-- End list of repositories -->"""

replacement = """<!-- Begin list of repositories -->
<!-- This section is automatically generated from scripts/build_repo_lists. You shouldn't edit it manually. -->
| Repository | Description |
| --- | --- |"""

for repo in REPOSITORIES:
    repo_name = repo["id"]
    repo_base_url = f"https://github.com/nationalarchives/{repo_name}"
    repo_description = repo["description"] if "description" in repo else "-"

    replacement += f"""
| [{repo_name}]({repo_base_url}) | {repo_description} |"""

replacement += """
<!-- End list of repositories -->"""

readme_str = re.sub(pattern, replacement, readme_str, flags=re.DOTALL)

with open("README.md", "w") as f:
    f.write(readme_str)
