openapi: 3.1.1
info:
  title: "National Archives Find Case Law: Public API"
  version: 0.3.0
  description: |-
    Our API provides access to judgments and other documents held by The National Archives and published via the Find Case Law service.

    ## Open Justice Licence

    The National Archives has worked in collaboration with The Ministry of Justice and the Judicial Executive Board to design a new licensing framework for the reuse of case law as data. The [Open Justice licence](https://caselaw.nationalarchives.gov.uk/open-justice-licence) is designed to protect the personal data within the records while supporting the principles of Open Justice.

    The Open Justice licence allows you to copy, publish, distribute and transmit case law data. It permits you to use the data commercially, for example, by combining it with other information, or by including it in your own product or application. There are certain conditions that apply under this licence.

    You do not need to apply to re-use Find Case Law records if your re-use complies with the terms and conditions of the Open Justice Licence.

    **The Open Justice licence does not permit computational analysis.** If you intend to do any programmatic searching in bulk across the Find Case Law records to identify, extract or enrich contents within the records you will need to [apply to perform computational analysis](https://caselaw.nationalarchives.gov.uk/re-use-find-case-law-records/licence-application-process). There are no application charges.

    ## Document formats

    Documents within Find Case Law are predominantly available as XML (and by extension HTML), although some are only available as PDFs.

    ### XML

    Where documents exist as XML, these have been submitted for publication by the courts as a Microsoft Word document. This has then been automatically converted to XML, marked up according to the [international data standard (LegalDocML)](https://groups.oasis-open.org/communities/tc-community-home2?CommunityKey=3425f20f-b704-4076-9fab-018dc7d3efbe), and validated by our legal editorial team. This data includes:

    - Neutral Citation
    - Court / Chamber
    - Date
    - Case Name
    - Party Names
    - Judges' Names

    XML documents are then automatically converted to HTML for publication on the Find Case Law website.

    ### PDF

    Some documents, particularly historic documents, may only exist as PDFs. In these cases we will provide as much metadata regarding the document as we are able, although this may not be as complete as in an XML document.

    ## Give us your feedback

    We are still actively developing Find Case Law based on user feedback. This includes improving the experience of how data re-users can access the data.

    You can provide feedback by using our [feedback form](https://corexmsnp4n42lf2kht3.qualtrics.com/jfe/form/SV_0lyyYAzfv9bGcyW).
  termsOfService: "https://caselaw.nationalarchives.gov.uk/terms-of-use"
  contact:
    email: caselaw@nationalarchives.gov.uk
    url: "https://caselaw.nationalarchives.gov.uk/"
    name: Find Case Law
  license:
    name: Open Justice Licence
    url: "https://caselaw.nationalarchives.gov.uk/open-justice-licence"
  summary: "The Find Case Law API allows you to access court judgments and tribunal decisions held in the [Find Case Law service](https://caselaw.nationalarchives.gov.uk/), operated by the National Archives."
servers:
  - url: "https://caselaw.nationalarchives.gov.uk"
    description: Find Case Law
components:
  parameters:
    documentUri:
      name: document_uri
      in: path
      required: true
      schema:
        type: string
      example: ewhc/tcc/2022/42
      description: The unique identifier for this document within Find Case Law.
  responses:
    documentFeed:
      description: |
        An Atom feed of documents, sorted by one of the dates within those documents.
      content:
        application/xml:
          schema:
            description: List in Atom
          examples:
            list:
              description: An example of a complete response, with only one `entry`.
              value: |
                <?xml version="1.0" encoding="utf-8"?>
                <?xml-stylesheet href="/static/atom.xsl" type="text/xsl" ?>
                <feed xml:lang="en-us" xmlns="http://www.w3.org/2005/Atom" xmlns:tna="https://caselaw.nationalarchives.gov.uk">
                    <title>Latest documents, sorted by date the document was first published by the court (newest first)</title>
                    <link href="https://caselaw.nationalarchives.gov.uk/atom.xml" rel="alternate"/>
                    <link href="https://caselaw.nationalarchives.gov.uk/atom.xml" rel="self"/>
                    <id>https://caselaw.nationalarchives.gov.uk/atom.xml</id>
                    <updated>2025-04-30T15:00:00+00:00</updated>
                    <author>
                        <name>The National Archives</name>
                    </author>
                    <rights>https://caselaw.nationalarchives.gov.uk/open-justice-licence</rights>
                    <link href="https://caselaw.nationalarchives.gov.uk/atom.xml?page=1" rel="first"/>
                    <link href="https://caselaw.nationalarchives.gov.uk/atom.xml?page=6675" rel="last"/>
                    <link href="https://caselaw.nationalarchives.gov.uk/atom.xml?page=2" rel="next"/>
                    <entry>
                        <title>Jarndyce v. Jarndyce</title>
                        <link href="https://caselaw.nationalarchives.gov.uk/uksc/2024/123" rel="alternate"/>
                        <published>2025-04-30T00:00:00+00:00</published>
                        <updated>2025-04-30T09:54:24+00:00</updated>
                        <author>
                            <name>Upper Tribunal (Lands Chamber)</name>
                        </author>
                        <id>https://caselaw.nationalarchives.gov.uk/id/d-9b51d493-65ba-471f-8f08-c369ec66e3f8</id>
                        <summary type="html"/>
                        <tna:contenthash>d1b2a59fbea7e20077af9f91b27e95e865061b270be03ff539ab3b73587882e8</tna:contenthash>
                        <link href="https://caselaw.nationalarchives.gov.uk/uksc/2024/123/data.xml" rel="alternate" type="application/akn+xml"/>
                        <tna:uri>d-9b51d493-65ba-471f-8f08-c369ec66e3f8</tna:uri>
                        <link href="https://assets.caselaw.nationalarchives.gov.uk/d-9b51d493-65ba-471f-8f08-c369ec66e3f8/d-9b51d493-65ba-471f-8f08-c369ec66e3f8.pdf" rel="alternate" type="application/pdf"/>
                    </entry>
                </feed>
    document:
      description: "The contents of a single document, as [Akoma Ntoso XML](https://www.oasis-open.org/standard/akn-v1-0/)."
      content:
        application/akn+xml:
          schema:
            description: Akoma Ntoso
paths:
  /atom.xml:
    get:
      summary: Get an Atom feed of documents
      description: |
        Return a list of documents in Find Case Law, ordered by date.

        Without any parameters, this will order by the most recently handed down judgments and documents first. The parameters used are identical to
        those used for the advanced search at https://caselaw.nationalarchives.gov.uk/judgments/search: a link to the feed mirroring those
        search results is available on each search result.

        Each differently named parameter filters out documents that do not match it.

        The feed has multiple pages (see the `link` tag with a `rel` attribute of `next` for the next page).

        Each `entry` tag contains a different document's metadata. Notable tags include:
        * `<tna:contenthash>`: A hash of the text in the judgment, with whitespace removed. Can be used to determine if the underlying judgment text has changed.
        * `<link type="application/akn+xml">`: A link to the XML of the judgment
        * `<link type="application/pdf">`: A link to the PDF of the judgment
      operationId: atomFeed
      parameters:
        - name: query
          required: false
          in: query
          schema:
            type: string
          description: |
            Full text search of a judgment. `"financial records"` will only find judgments with those two words in that order. Multiple
            space-separated words will only find judgments that have all those words.
        # todo: from_ and to_date_0, _1, _2, 2 is year
        - name: court
          required: false
          # can be multiple
          in: query
          schema:
            type: string
          description: |
            A court code. Currently there are two forms of court code, one used in the URL structure (`ewhc/fam`) and one used in the XML
            court tag `EWHC-Family`. Either can be searched for. If multiple courts or tribunals are given, results from all those courts
            may be returned.
        - name: tribunal
          required: false
          # can be multiple
          in: query
          schema:
            type: string
          description: |
            A tribunal. Identical to the court codes above.
        - name: party
          required: false
          in: query
          schema:
            type: string
          description: |
            A full-match for a word in the name of a party to the judgment.
        - name: judge
          required: false
          in: query
          schema:
            type: string
          description: |
            A full-match for a word in the name of a judge or similar involved in the judgment
        - name: order
          required: false
          in: query
          schema:
            type: string
            enum:
              - date
              - "-date"
              - updated
              - "-updated"
              - transformation
              - "-transformation"
            default: "-date"
          description: |
            Which of the dates within the document to use for ordering. Prepend a `-` to sort by newest first.

            - `date`: The date the document was first published by the court
            - `updated`: The last date the document was updated in the Find Case Law system, including changes to its metadata
            - `transformation`: The date the body of the document was last modified, including changes to either the body text, XML markup, or both
        - name: page
          required: false
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: "Where results are across multiple pages, the page of results to return."
        - name: per_page
          required: false
          in: query
          schema:
            type: integer
            default: 50
          description: |
            How many results to list per page.
      responses:
        "200":
          $ref: "#/components/responses/documentFeed"
      tags:
        - Reading documents
  "/{document_uri}/data.xml":
    get:
      summary: Get a single document
      operationId: getDocumentByUri
      responses:
        "200":
          $ref: "#/components/responses/document"
      tags:
        - Reading documents
      description: Retrieve the XML of a single document based on its identifier.
    parameters:
      - $ref: "#/components/parameters/documentUri"
  "/{court}/{subdivision}/{year}/atom.xml":
    get:
      summary: Get a list of recently published or updated documents
      description: |
        Deprecated -- will now redirect to `/atom.xml` with relevant parameters

        Less specific feeds can be gained by omitting the components e.g. `/`, `/2022/`, `/ewhc/` and `/ewhc/ch/` are all valid prefixes to `atom.xml`.

        Note that a `{court}` is required if there is a `{subdivision}`.
      operationId: listJudgments
      parameters:
        - name: order
          required: false
          in: query
          schema:
            type: string
            enum:
              - date
              - "-date"
              - updated
              - "-updated"
              - transformation
              - "-transformation"
            default: "-date"
          description: |
            Which of the dates within the document to use for ordering. Prepend a `-` to sort by newest first.

            - `date`: The date the document was first published by the court
            - `updated`: The last date the document was updated in the Find Case Law system, including changes to its metadata
            - `transformation`: The date the body of the document was last modified, including changes to either the body text, XML markup, or both
        - name: page
          required: false
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: "Where results are across multiple pages, the page of results to return."
      responses:
        "301":
          description: Moved Permanently
          headers:
            location:
              schema:
                type: string
              description: "https://caselaw.nationalarchives.gov.uk/atom.xml?court={court}/{subdivision}&year={year}&order=-date&page=1"
      tags:
        - Reading documents
      deprecated: true
    parameters:
      - name: court
        required: true
        in: path
        example: ewca
        schema:
          type: string
        description: The court code to return results for.
      - name: subdivision
        required: true
        in: path
        example: pat
        schema:
          type: string
        description: The court subdivision code to return results for.
      - name: year
        required: true
        in: path
        example: 2022
        schema:
          type: integer
        description: The year to return results for.
tags:
  - name: Reading documents
    description: |
      ## Detecting content changes

      Whenever a document is changed it appears in the recently published list. This includes minor updates such as when we enrich the document with hyperlinks to other legal citations, as well as more significant changes such as revisions we have received from the courts.

      ### Content hash

      Both the Atom feed and the document XML include a content hash so that you can check if the text of the document has changed.

      This hash is generated by removing all XML markup and leaving only the body text of the document, and then generating a SHA256 hash of that text. As such this hash should be stable across things such as formatting changes, and will only change if the text of the document does.
